<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Usuarios', 'doctrine');

/**
 * BaseUsuarios
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $login
 * @property string $contrasena
 * @property string $correo
 * @property string $nombres
 * @property string $apellidos
 * @property string $sexo
 * @property date $fechanacimiento
 * @property Doctrine_Collection $Cancionesporusuario
 * @property Doctrine_Collection $Carrito
 * @property Doctrine_Collection $Compartidas
 * @property Doctrine_Collection $Listas
 * 
 * @method string              getLogin()               Returns the current record's "login" value
 * @method string              getContrasena()          Returns the current record's "contrasena" value
 * @method string              getCorreo()              Returns the current record's "correo" value
 * @method string              getNombres()             Returns the current record's "nombres" value
 * @method string              getApellidos()           Returns the current record's "apellidos" value
 * @method string              getSexo()                Returns the current record's "sexo" value
 * @method date                getFechanacimiento()     Returns the current record's "fechanacimiento" value
 * @method Doctrine_Collection getCancionesporusuario() Returns the current record's "Cancionesporusuario" collection
 * @method Doctrine_Collection getCarrito()             Returns the current record's "Carrito" collection
 * @method Doctrine_Collection getCompartidas()         Returns the current record's "Compartidas" collection
 * @method Doctrine_Collection getListas()              Returns the current record's "Listas" collection
 * @method Usuarios            setLogin()               Sets the current record's "login" value
 * @method Usuarios            setContrasena()          Sets the current record's "contrasena" value
 * @method Usuarios            setCorreo()              Sets the current record's "correo" value
 * @method Usuarios            setNombres()             Sets the current record's "nombres" value
 * @method Usuarios            setApellidos()           Sets the current record's "apellidos" value
 * @method Usuarios            setSexo()                Sets the current record's "sexo" value
 * @method Usuarios            setFechanacimiento()     Sets the current record's "fechanacimiento" value
 * @method Usuarios            setCancionesporusuario() Sets the current record's "Cancionesporusuario" collection
 * @method Usuarios            setCarrito()             Sets the current record's "Carrito" collection
 * @method Usuarios            setCompartidas()         Sets the current record's "Compartidas" collection
 * @method Usuarios            setListas()              Sets the current record's "Listas" collection
 * 
 * @package    MusicStore
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsuarios extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('usuarios');
        $this->hasColumn('login', 'string', 15, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 15,
             ));
        $this->hasColumn('contrasena', 'string', 8, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('correo', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('nombres', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('apellidos', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('sexo', 'string', 1, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('fechanacimiento', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Cancionesporusuario', array(
             'local' => 'login',
             'foreign' => 'logintitular'));

        $this->hasMany('Carrito', array(
             'local' => 'login',
             'foreign' => 'logincomprador'));

        $this->hasMany('Compartidas', array(
             'local' => 'login',
             'foreign' => 'logindestinatario'));

        $this->hasMany('Listas', array(
             'local' => 'login',
             'foreign' => 'loginduenolista'));
    }
}